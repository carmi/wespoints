// Generated by CoffeeScript 1.4.0
(function() {
  var american_date, d_diff, d_left, d_so_far, d_total, dates, default_input_txt, generate_errors, get_row, now, plan, plans, populate_with_left, round_to, row_sel, set_row, valid_meals, valid_points, w_left, w_so_far, w_total;

  default_input_txt = "--";

  plans = [[0, 1582], [105, 723], [135, 508], [165, 293], [210, 107], [285, 53]];

  dates = {
    start: "Sep 1, 2012",
    end: "Dec 16, 2012",
    breaks: {
      "Fall": ["Oct 12, 2012", "Oct 17, 2012"],
      "Thanksgiving": ["Nov 20, 2012", "Nov 26, 2012"]
    }
  };

  american_date = function(s, sep) {
    var d, parts;
    sep = sep || "-";
    d = new Date(Date.parse(s));
    parts = d.toISOString().split("T")[0].split("-");
    return (parts[1][0] === "0" ? parts[1].slice(1) : parts[1]) + sep + parts[2] + sep + parts[0];
  };

  d_diff = function(start, end) {
    var date_ints, exclude, one_day, total;
    one_day = 1000 * 60 * 60 * 24;
    date_ints = _.map(dates.breaks, function(a) {
      return _.map(a, function(s) {
        return Date.parse(s);
      });
    });
    exclude = _.reduce(date_ints, (function(m, i) {
      var a, b, x, y;
      a = start;
      b = end;
      x = i[0];
      y = i[1];
      if (a < x) {
        if (b < x) {
          return 0;
        } else if (b < y) {
          return b - x;
        } else {
          return y - x;
        }
      } else if (a < y) {
        if (b < y) {
          return b - a;
        } else {
          return y - a;
        }
      } else {
        return 0;
      }
    }), 0);
    total = end - start;
    return Math.ceil((total - exclude) / one_day);
  };

  round_to = function(n, p) {
    var mult;
    mult = Math.pow(10, p);
    return Math.round(n * mult) / mult;
  };

  now = Date.now();

  d_total = d_diff(Date.parse(dates.start), Date.parse(dates.end));

  w_total = d_total / 7;

  d_left = d_diff(now, Date.parse(dates.end));

  w_left = d_left / 7;

  d_so_far = d_total - d_left;

  w_so_far = w_total - w_left;

  row_sel = function(row_name, subelem) {
    switch (row_name) {
      case "left":
        return "#left input";
      case "left-pd":
        return "#left-pd input";
      case "left-pw":
        return "#left-pw input";
      case "used":
        return "#used input";
      case "used-pd":
        return "#used-pd input";
      case "used-pw":
        return "#used-pw input";
      default:
        return "";
    }
  };

  get_row = function(n) {
    var sel;
    sel = row_sel(n);
    return _.map([$(sel).first().val(), $(sel).last().val()], function(s) {
      return parseInt(s);
    });
  };

  set_row = function(n, vals, ideals) {
    $(row_sel(n)).first().val(isNaN(vals[0]) ? "" : round_to(vals[0], 1));
    return $(row_sel(n)).last().val(isNaN(vals[1]) ? "" : round_to(vals[1], 2));
  };

  populate_with_left = function(plan) {
    var left, m_err, m_p_err, p_err, used;
    left = get_row("left");
    set_row("left-pd", _.map(left, function(n) {
      return n / d_left;
    }));
    set_row("left-pw", _.map(left, function(n) {
      return n / w_left;
    }));
    used = [plan[0] - left[0], plan[1] - left[1]];
    set_row("used", used);
    set_row("used-pd", _.map(used, function(n) {
      return n / d_so_far;
    }));
    set_row("used-pw", _.map(used, function(n) {
      return n / w_so_far;
    }));
    m_err = $(".primary .error-m");
    p_err = $(".primary .error-p");
    m_p_err = $(".primary .error-m-p");
    if (valid_meals()) {
      $("tr.secondary td.m").hover(function() {
        return $(this).parent().find(".ideal-m").show();
      }, function() {
        return $(this).parent().find(".ideal-m").hide();
      });
    } else {
      $("tr.secondary td.m").unbind("mouseenter mouseleave");
      $(".ideal-m").hide();
    }
    if (valid_points()) {
      return $("tr.secondary td.p").hover(function() {
        return $(this).parent().find(".ideal-p").show();
      }, function() {
        return $(this).parent().find(".ideal-p").hide();
      });
    } else {
      $("tr.secondary td.p").unbind("mouseenter mouseleave");
      return $(".ideal-p").hide();
    }
  };

  valid_meals = function() {
    return _.all($("tr.primary"), function(row) {
      var val;
      val = $(row).find("td.m input").val();
      return !isNaN(val) && parseInt(val) > 0 && parseInt(val) < plan[0];
    });
  };

  valid_points = function() {
    return _.all($("tr.primary"), function(row) {
      var val;
      val = $(row).find("td.p input").val();
      return !isNaN(val) && parseInt(val) > 0 && parseInt(val) < plan[1];
    });
  };

  generate_errors = function() {
    return _.each($("tr.primary"), function(row) {
      var hide, m, m_val, p, p_val, show;
      m_val = $(row).find("td.m input").val();
      p_val = $(row).find("td.p input").val();
      m = m_val !== "" && m_val !== default_input_txt && (isNaN(m_val) || parseInt(m_val) < 0 || parseInt(m_val) > plan[0]);
      p = p_val !== "" && p_val !== default_input_txt && (isNaN(p_val) || parseInt(p_val) < 0 || parseInt(p_val) > plan[1]);
      if (m && p) {
        show = ".error-m-p";
        hide = [".error-m", ".error-p"];
      } else if (m) {
        show = ".error-m";
        hide = [".error-m-p", ".error-p"];
      } else if (p) {
        show = ".error-p";
        hide = [".error-m-p", ".error-m"];
      } else {
        show = "";
        hide = [".error-m", ".error-p", ".error-m-p"];
      }
      $(row).find(show).show();
      return $(row).find(hide.join(", ")).hide();
    });
  };

  plan = [];

  $(document).ready(function() {
    var back_cell, info_text;
    plans.reverse();
    _.each(plans, function(p, i) {
      var row;
      row = $("<tr class='choices highlight' id='plan" + (plans.length - i - 1) + "'></tr>").prependTo("table#plans tbody");
      return _.each([$("<td class='results title'>Total</td>"), $("<td>" + p[0] + "</td>").addClass("m"), $("<td>" + p[1] + "</td>").addClass("p")], function(cell) {
        return cell.appendTo(row);
      });
    });
    plans.reverse();
    $("#date").text((new Date).toDateString());
    $("#days-left").text("" + d_left + " / " + d_total);
    $("#info-target").hover(function() {
      return $("#info").show();
    }, function() {
      return $("#info").hide();
    });
    info_text = "<p>I'm assuming:</p>  <ul>    <li>you arrived on " + (american_date(dates.start)) + "</li>    <li>you're leaving on " + (american_date(dates.end)) + "</li>  </ul>  <p>These are the official housing open/close dates. Left-per-x  calculations are accurate if you arrived earlier (ahem, seniors), but  will be (very, very) slighly below their true values if you're planning to  leave early or above if you're planning to leave later.</p>  <p>I'm also not counting the days during these breaks:</p>  <ul>";
    _.each(dates.breaks, function(bdates, bname) {
      return info_text += "<li>" + bname + ": " + (american_date(bdates[0])) + " &ndash;  " + (american_date(bdates[1])) + "</li>";
    });
    info_text += "</ul>";
    $("#info #content").html(info_text);
    $(".secondary input").attr("disabled", true);
    $("tr.choices td").click(function() {
      var $row, ideal_left, ideal_pd, ideal_pw, ideal_used, row;
      $("#help-text").hide();
      $row = $(this).parent("tr");
      row = $row.get(0);
      if ($row.hasClass("highlight")) {
        $("tr.choices.highlight").removeClass("highlight");
        $row.addClass("totalRow");
        plan = plans[row.id.split("plan")[1]];
        $("tr.choices").filter(function() {
          return this !== row;
        }).hide();
        $(".results").show();
        $row.append(back_cell);
        ideal_left = _.map(plan, function(n) {
          return n * d_left / d_total;
        });
        ideal_used = _.map(plan, function(n) {
          return n * d_so_far / d_total;
        });
        ideal_pd = _.map(plan, function(n) {
          return n / d_total;
        });
        ideal_pw = _.map(plan, function(n) {
          return n / w_total;
        });
        return _.each(["left", "left-pd", "left-pw", "used", "used-pd", "used-pw"], function(n) {
          return _.each(["m", "p"], function(x) {
            var ideals, pos, round;
            ideals = (function() {
              switch (n) {
                case "left":
                  return ideal_left;
                case "used":
                  return ideal_used;
                case "left-pd":
                case "used-pd":
                  return ideal_pd;
                case "left-pw":
                case "used-pw":
                  return ideal_pw;
              }
            })();
            pos = (function() {
              switch (x) {
                case "m":
                  return 0;
                case "p":
                  return 1;
              }
            })();
            round = (function() {
              switch (x) {
                case "m":
                  return 1;
                case "p":
                  return 2;
              }
            })();
            return $("#" + n + " .ideal-" + x + " .ideal-num").text(round_to(ideals[pos], round));
          });
        });
      }
    });
    $("#back").click(function() {
      $("#help-text").show();
      back_cell.detach();
      $("tr.choices").removeClass("totalRow").addClass("highlight");
      $(".results").hide();
      $("tr.choices").show();
      $(row_sel("left")).val(default_input_txt);
      $(".primary input").keyup();
      return $("#plans td.error").text("");
    });
    back_cell = $("#back-cell").detach();
    $(".primary input").val(default_input_txt);
    $(".primary input").keyup(function() {
      generate_errors();
      return populate_with_left(plan);
    });
    $(".primary input").focus(function() {
      if ($(this).val() === default_input_txt) {
        return $(this).val("");
      }
    });
    $(".primary input").click(function() {
      return this.select();
    });
    return $(".primary input").blur(function() {
      if ($(this).val() === "") {
        return $(this).val(default_input_txt);
      }
    });
  });

}).call(this);
